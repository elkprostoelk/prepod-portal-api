// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrepodPortal.DataAccess;

#nullable disable

namespace PrepodPortal.DataAccess.Migrations
{
    [DbContext(typeof(PrepodPortalDbContext))]
    [Migration("20230408211026_AddedDissertationDefenseEntity")]
    partial class AddedDissertationDefenseEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3c322c1c-26b2-489b-ad6f-94f557a13f66",
                            ConcurrencyStamp = "1236478e-b06c-4af9-8e14-589466be5591",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "8d0491c5-b160-402b-bd0b-a580a4cbfdea",
                            ConcurrencyStamp = "56104639-ef83-48fb-b6f9-46e82fb2ec5b",
                            Name = "profiles creator",
                            NormalizedName = "PROFILES CREATOR"
                        },
                        new
                        {
                            Id = "fd35cfe4-0d67-45a6-9d4a-4e7ba9ebdae2",
                            ConcurrencyStamp = "800eeea9-da4d-4ef4-b944-adb5ba93660b",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.AcademicDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DiplomaNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ReceiveDiplomaDate")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("HomeTown")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScienceDegree")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkplaceLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkplacePosition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "Кафедра комп’ютерних наук та програмної інженерії"
                        },
                        new
                        {
                            Id = 2L,
                            Title = "Кафедра фізики"
                        },
                        new
                        {
                            Id = 3L,
                            Title = "Кафедра алгебри, геометрії та математичного аналізу"
                        },
                        new
                        {
                            Id = 4L,
                            Title = "Кафедра географії та екології"
                        },
                        new
                        {
                            Id = 5L,
                            Title = "Кафедра біології людини та імунології"
                        },
                        new
                        {
                            Id = 6L,
                            Title = "Кафедра ботаніки"
                        },
                        new
                        {
                            Id = 7L,
                            Title = "Кафедра педагогіки, психології й освітнього менеджменту імені проф. Є. Петухова"
                        },
                        new
                        {
                            Id = 8L,
                            Title = "Кафедра спеціальної освіти"
                        },
                        new
                        {
                            Id = 9L,
                            Title = "Кафедра теорії та методики дошкільної та початкової освіти"
                        },
                        new
                        {
                            Id = 10L,
                            Title = "Кафедра педагогіки та психології дошкільної та початкової освіти"
                        },
                        new
                        {
                            Id = 11L,
                            Title = "Кафедра національного, міжнародного права та правоохоронної діяльності"
                        },
                        new
                        {
                            Id = 12L,
                            Title = "Кафедра готельно-ресторанного та туристичного бізнесу"
                        },
                        new
                        {
                            Id = 13L,
                            Title = "Кафедра економіки, менеджменту та адміністрування"
                        },
                        new
                        {
                            Id = 14L,
                            Title = "Кафедра фінансів, обліку та підприємництва"
                        },
                        new
                        {
                            Id = 15L,
                            Title = "Кафедра англійської філології та світової літератури імені професора Олега Мішукова"
                        },
                        new
                        {
                            Id = 16L,
                            Title = "Кафедра німецької та романської філології"
                        },
                        new
                        {
                            Id = 17L,
                            Title = "Кафедра української і слов'янської філології та журналістики"
                        },
                        new
                        {
                            Id = 18L,
                            Title = "Кафедра музичного мистецтва"
                        },
                        new
                        {
                            Id = 19L,
                            Title = "Кафедра культурології"
                        },
                        new
                        {
                            Id = 20L,
                            Title = "Кафедра образотворчого мистецтва і дизайну"
                        },
                        new
                        {
                            Id = 21L,
                            Title = "Кафедра хореографічного мистецтва"
                        },
                        new
                        {
                            Id = 22L,
                            Title = "Кафедра фізичної терапії та ерготерапії"
                        },
                        new
                        {
                            Id = 23L,
                            Title = "Кафедра хімії та фармації"
                        },
                        new
                        {
                            Id = 24L,
                            Title = "Кафедра медицини"
                        },
                        new
                        {
                            Id = 25L,
                            Title = "Кафедра філософії, соціології та соціальної роботи"
                        },
                        new
                        {
                            Id = 26L,
                            Title = "Кафедра психології"
                        },
                        new
                        {
                            Id = 27L,
                            Title = "Кафедра історії, археології та методики викладання"
                        },
                        new
                        {
                            Id = 28L,
                            Title = "Кафедра медико-біологічних основ фізичного виховання та спорту"
                        },
                        new
                        {
                            Id = 29L,
                            Title = "Кафедра теорії та методики фізичного виховання"
                        },
                        new
                        {
                            Id = 30L,
                            Title = "Кафедра олімпійського та професійного спорту"
                        },
                        new
                        {
                            Id = 31L,
                            Title = "Не вказано"
                        });
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.DissertationDefense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CipherAndSpecialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DefenseDate")
                        .HasColumnType("date");

                    b.Property<string>("DefenseLocationAndWhoAssignedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiplomaNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReceiveDiplomaDate")
                        .HasColumnType("date");

                    b.Property<string>("ScientificDirector")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DissertationDefenses");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QualificationByDiploma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Publication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AuthorPagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("PrintedAuthorPagesCount")
                        .HasColumnType("int");

                    b.Property<string>("PublicationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<long?>("ResearchWorkId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalPagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPrintedPageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResearchWorkId");

                    b.ToTable("Publications");

                    b.HasDiscriminator<string>("PublicationType").HasValue("Publication");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ResearchWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HeldFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeldTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoveltyOfScientificResult")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ObtainedScientificResult")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PracticalResultsValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StateRegisterNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleAndContentOfPerformedStage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ResearchWorks");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ScientometricDbProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfileLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ScientometricDbProfiles");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.UserPublication", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PublicationId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "PublicationId");

                    b.HasIndex("PublicationId");

                    b.ToTable("UserPublications", (string)null);
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.UserResearchWork", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ResearchWorkId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "ResearchWorkId");

                    b.HasIndex("ResearchWorkId");

                    b.ToTable("UserResearchWorks", (string)null);
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Article", b =>
                {
                    b.HasBaseType("PrepodPortal.DataAccess.Entities.Publication");

                    b.Property<int>("ArticleType")
                        .HasColumnType("int");

                    b.Property<string>("EditionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Issn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Issue")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Article_Issue");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Article_Number");

                    b.Property<string>("PageNumbers")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Article_PageNumbers");

                    b.Property<string>("ScientometricDb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("SnipIndex")
                        .HasColumnType("real");

                    b.Property<string>("Tome")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Article_Tome");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Article_Url");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.LectureTheses", b =>
                {
                    b.HasBaseType("PrepodPortal.DataAccess.Entities.Publication");

                    b.Property<string>("EditionTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LectureTheses_Isbn");

                    b.Property<string>("Issue")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PageNumbers")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Tome")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("LectureTheses");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Monograph", b =>
                {
                    b.HasBaseType("PrepodPortal.DataAccess.Entities.Publication");

                    b.Property<string>("GryphGiven")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MonographType")
                        .HasColumnType("int");

                    b.Property<string>("PublisherTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Monograph");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.SchoolBook", b =>
                {
                    b.HasBaseType("PrepodPortal.DataAccess.Entities.Publication");

                    b.Property<int>("GryphType")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SchoolBook_Isbn");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("OrderNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PublisherTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SchoolBook_PublisherTitle");

                    b.Property<int>("SchoolBookType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SchoolBook");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.AcademicDegree", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ApplicationUser", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.DissertationDefense", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany("DissertationDefenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Education", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Publication", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ResearchWork", "ResearchWork")
                        .WithMany("Publications")
                        .HasForeignKey("ResearchWorkId")
                        .IsRequired();

                    b.Navigation("ResearchWork");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ScientometricDbProfile", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany("ScientometricDbProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.UserPublication", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.Publication", "Publication")
                        .WithMany("UserPublications")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany("UserPublications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.UserResearchWork", b =>
                {
                    b.HasOne("PrepodPortal.DataAccess.Entities.ResearchWork", "ResearchWork")
                        .WithMany()
                        .HasForeignKey("ResearchWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrepodPortal.DataAccess.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AcademicDegrees");

                    b.Navigation("DissertationDefenses");

                    b.Navigation("Educations");

                    b.Navigation("ScientometricDbProfiles");

                    b.Navigation("UserPublications");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.Publication", b =>
                {
                    b.Navigation("UserPublications");
                });

            modelBuilder.Entity("PrepodPortal.DataAccess.Entities.ResearchWork", b =>
                {
                    b.Navigation("Publications");
                });
#pragma warning restore 612, 618
        }
    }
}
